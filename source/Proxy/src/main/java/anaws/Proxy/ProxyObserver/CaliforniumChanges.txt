CoapClient: 
	original line: https://github.com/eclipse/californium/blob/f3769602ae52217deead0e92ee95868cd0d35b85/californium-core/src/main/java/org/eclipse/californium/core/CoapClient.java#L1139
	change line 1140: if (response == null || !response.advanced().getOptions().hasObserve() 
				|| response.getCode().equals(CoAP.ResponseCode.NOT_ACCEPTABLE)) {
	motivation: the first CoapObserveRelation must be cancelled if the subject started the negotiation
	
Request:
	original line: https://github.com/eclipse/californium/blob/f3769602ae52217deead0e92ee95868cd0d35b85/californium-core/src/main/java/org/eclipse/californium/core/coap/Request.java#L642
	change line 642: 	return isObserveOption(CoAP.QoSLevel.CRITICAL_HIGHEST_PRIORITY) || isObserveOption(CoAP.QoSLevel.CRITICAL_HIGH_PRIORITY) || isObserveOption(CoAP.QoSLevel.NON_CRITICAL_MEDIUM_PRIORITY) || isObserveOption(CoAP.QoSLevel.NON_CRITICAL_LOW_PRIORITY);
	motivation: The ObserveRelation must be build also if the observe option is equal to all the possible priority values
	
ObserveRelation:
	original line:
	line 62: private int QoS;
	lines 129-141:
		
		public void setQoS(int QoS) {
			this.QoS = QoS;
		}

		public int getQoS() {
			return QoS;
		}
	lines 265-271:
		public int compareToDesc(ObserveRelation relation) {
			if ( QoS == relation.getQoS() ) 
				return 0;
			if ( QoS > relation.getQoS() )
				return -1;
			return 1;
		}
	motivation: Now the ObserverRelation stores the QoS level
	
CoapResource:
	
				/* Sorted list of observers used to notifying following the correct order */
	declaration: 
				private ArrayList<ObserveRelation> sortedObservers;
				
	addObserveRelation():
				sortedObservers.add(relation);
				Collections.sort(sortedObservers, new Comparator<ObserveRelation>() {
					public int compare(ObserveRelation o1, ObserveRelation o2) {
						return (o1).compareToDesc(o2);
					}
				});
	removeObserveRelation():		
				sortedObservers.remove(relation);
				
				
	line 157: 	/** Current Server State */
				private ServerState serverState;
	lines 208-220:
			public void setServerState(ServerState serverState) {
				this.serverState = serverState;
				
				if (serverState == ServerState.ONLY_CRITICAL) {
					clearNonCriticalObserveRelations();
				} else if ( serverState == ServerState.UNVAVAILABLE ) {
					clearObserveRelations();
				}
			}
			
			public ServerState getServerState() {
				return serverState;
			}
	lines 575-583:
			public void clearNonCriticalObserveRelations() {
				for (ObserveRelation relation : observeRelations) {
					if (relation.getQoS() == CoAP.QoSLevel.NON_CRITICAL_MEDIUM_PRIORITY || relation.getQoS() == CoAP.QoSLevel.NON_CRITICAL_LOW_PRIORITY  )
						relation.cancel();
				}
			}
	motivation: The CoapResource stores also the server state, if the state changes to ONLY_CRITICAL the observeRelation with priority 1-2 needs to be notified and cancelled, if the states changes to UNVAILABLE all the relations need to be notified and cancelled
	
	
ServerMessadeDeliver:
		relation.setQoS(request.getOptions().getObserve());
	

CoAP:
	added: 
	public class QoSLevel {
			
		public static final int CRITICAL_HIGHEST_PRIORITY = 0xc00000; // 12582912
		public static final int CRITICAL_HIGH_PRIORITY = 0x800000; // 8388608
		public static final int NON_CRITICAL_MEDIUM_PRIORITY = 0x400000; // 4194304
		public static final int NON_CRITICAL_LOW_PRIORITY = 0x000000; // 0
		
		private QoSLevel() {
			// prevent instantiation
		}
	}
	
Created a new file into package org.eclipse.californium.core.server;
	public enum ServerState {
		UNVAVAILABLE, ONLY_CRITICAL, AVAILABLE
	}